import { Component, Input, ContentChildren, ElementRef, Renderer2 } from '@angular/core';
import { GridStackOptions } from './grid-stack-options.model';
import { GridStackItemComponent } from './grid-stack-item.component';
import * as jqueryProxy from 'jquery';
import * as _ from 'lodash';
import 'gridstack';
const jquery = jqueryProxy.default || jqueryProxy;
export class GridStackComponent {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.options = new GridStackOptions();
        this.gridStack = null;
        this.grid = null;
    }
    makeWidget(item) {
        //let widget = this.grid.makeWidget(item.nativeElement);
        item.jGridRef = this.grid;
        //item.jWidgetRef = widget;
        if (item.option != null && item.option.noResize != null && item.option.noResize == true)
            return;
        this.grid.resizable(item.nativeElement, true);
        this.grid.move(item.nativeElement, item.option.x, item.option.y);
        this.grid.resize(item.nativeElement, item.option.width, item.option.height);
    }
    ;
    updateWidget(item) {
        this.grid.resizable(item.nativeElement, true);
        this.grid.move(item.nativeElement, item.option.x, item.option.y);
        this.grid.resize(item.nativeElement, item.option.width, item.option.height);
    }
    enableMove(doEnable, includeNewWidgets) {
        this.grid.enableMove(doEnable, includeNewWidgets);
    }
    AddWidget(item) {
        let widget = this.grid.makeWidget(item.nativeElement);
        item.jGridRef = this.grid;
        //item.jWidgetRef = widget;
        if (item.option != null && item.option.noResize != null && item.option.noResize == true)
            return;
        this.grid.resizable(item.nativeElement, true);
        this.grid.move(item.nativeElement, item.option.x, item.option.y);
        this.grid.resize(item.nativeElement, item.option.width, item.option.height);
    }
    RemoveWidget(item) {
        let widget = this.grid.removeWidget(item.nativeElement, false);
    }
    ngAfterContentInit() {
        var that = this;
        let nativeElement = this.el.nativeElement;
        if (this.options == null)
            this.options = new GridStackOptions();
        if (this.options.cellHeight == null)
            this.options.cellHeight = 60;
        if (this.options.width == null)
            this.options.width = 12;
        if (this.options.height == null)
            this.options.height = 0;
        if (this.options.animate == null)
            this.options.animate = true;
        if (this.options.float == null)
            this.options.float = false;
        if (this.options.resizable == null)
            this.options.resizable = true;
        String(this.options.width) == null ? this.renderer.removeAttribute(nativeElement, "data-gs-width") : this.renderer.setAttribute(nativeElement, "data-gs-width", String(this.options.width));
        String(this.options.height) == null ? this.renderer.removeAttribute(nativeElement, "data-gs-height") : this.renderer.setAttribute(nativeElement, "data-gs-height", String(this.options.height));
        //this.renderer.setElementAttribute(nativeElement, "data-gs-width", String(this.options.width));
        //this.renderer.setElementAttribute(nativeElement, "data-gs-height", String(this.options.height));
        this.gridStack = jquery(nativeElement).gridstack(this.options);
        this.grid = this.gridStack.data("gridstack");
        this.gridStack.on("change", (e, items) => {
            _.each(items, (item) => this.widgetChanged(item));
        });
        // Initialize widgets
        this.items.forEach(item => that.makeWidget(item));
    }
    widgetChanged(change) {
        console.log(change);
        //  debugger;
        //console.log(change);
        var jWidget = change.el;
        var gridStackItem = this.items.find(item => item.jWidgetRef !== null ? item.jWidgetRef === jWidget[0] : false);
        if (!gridStackItem)
            return;
        gridStackItem.update(change.x, change.y, change.width, change.height);
    }
}
GridStackComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-stack',
                template: `<ng-content></ng-content>`,
                styles: [":host { display: block; }"]
            },] }
];
GridStackComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
GridStackComponent.propDecorators = {
    options: [{ type: Input }],
    items: [{ type: ContentChildren, args: [GridStackItemComponent,] }]
};
//# sourceMappingURL=data:application/json;base64,