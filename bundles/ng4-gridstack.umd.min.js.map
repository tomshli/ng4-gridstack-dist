{"version":3,"sources":["../../../projects/ng4-gridstack/src/lib/grid-stack-options.model.ts","../../../projects/ng4-gridstack/src/lib/grid-stack-item.model.ts","../../../projects/ng4-gridstack/src/lib/grid-stack-item.component.ts","../../../projects/ng4-gridstack/src/lib/grid-stack.component.ts","../../../projects/ng4-gridstack/src/lib/grid-stack.directive.ts","../../../projects/ng4-gridstack/src/lib/grid-stack.pipe.ts","../../../projects/ng4-gridstack/src/index.ts"],"names":["GridStackItem","this","x","y","height","width","noResize","autoPosition","visible","Clone","widget","result","itemId","el","locked","maxHeight","maxWidth","minHeight","minWidth","noMove","GridStackItemComponent","renderer","onGridConfigurationChanged","EventEmitter","contentComponentRef","jGridRef","jWidgetRef","nativeElement","Object","defineProperty","prototype","ngOnInit","RenderWidget","UpdateWidget","item","option","String","removeAttribute","setAttribute","addClass","update","optionNew","emit","ngAfterViewInit","ngOnDestroy","destroy","Component","args","selector","template","ElementRef","Renderer2","ViewChild","read","ViewContainerRef","Input","Output","jquery","jqueryProxy.default","jqueryProxy","GridStackComponent","options","GridStackOptions","gridStack","grid","makeWidget","resizable","move","resize","updateWidget","enableMove","doEnable","includeNewWidgets","AddWidget","RemoveWidget","removeWidget","ngAfterContentInit","_this","that","cellHeight","animate","float","gridstack","data","on","e","items","_.each","widgetChanged","forEach","change","console","log","jWidget","gridStackItem","find","ContentChildren","Directive","GridStackPipe","transform","value","Pipe","name","Injectable","NgModule","imports","CommonModule","declarations","GridStackDirective","exports"],"mappings":"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","sourcesContent":["export class GridStackOptions {\r\n    acceptWidgets: boolean;\r\n    alwaysShowResizeHandle: boolean;\r\n    animate: boolean;\r\n    auto: boolean;\r\n    cellHeight: number; //default is 60 could be an integer (px) a string (ex: '10em', '100px', '10rem') 0 or null 'auto' - height will be calculated from cell width.\r\n    ddPlugin: boolean;\r\n    disableDrag: boolean;\r\n    disableResize: boolean;\r\n    draggable: boolean;\r\n    handle: string; //default: '.grid-stack-item-content'\r\n    handleClass: string;  //draggable handle class (e.g. 'grid-stack-item-content'). If set handle is ignored (default: null)\r\n    height: number; //maximum rows amount. Default is 0 which means no maximum rows\r\n    float: boolean; // enable floating widgets (default: false) \r\n    itemClass: string;  //widget class (default: 'grid-stack-item')\r\n    minWidth: number; //minimal width.If window width is less, grid will be shown in one - column mode (default: 768)\r\n    disableOneColumnMode: boolean; //disables the onColumnMode when the window width is less than minWidth (default: 'false')\r\n    oneColumnModeClass: string; //class set on grid when in one column mode (default: 'grid-stack-one-column-mode')\r\n    placeholderClass: string; //class for placeholder (default: 'grid-stack-placeholder')\r\n    placeholderText: string; //placeholder default content (default: '')\r\n    resizable: boolean; //allows to override jQuery UI resizable options. (default: {autoHide: true, handles: 'se'})\r\n    removable: boolean; //if true widgets could be removed by dragging outside of the grid. It could also be a jQuery selector string, in this case widgets will be removed by dropping them there (default: false)\r\n    removeTimeout: number; // time in milliseconds before widget is being removed while dragging outside of the grid. (default: 2000)\r\n    rtl: boolean | \"auto\"; //if true turns grid to RTL. Possible values are true, false, 'auto' (default: 'auto') See example\r\n    staticGrid: boolean; //makes grid static (default false). If true widgets are not movable/resizable. You don't even need jQueryUI draggable/resizable. A CSS class grid-stack-static is also added to the container.\r\n    verticalMargin: number; //vertical gap size (default: 20). Can be: an integer (px) a string (ex: '2em', '20px', '2rem')\r\n    width: number; //amount of columns (default: 12). Setting non-default value must be supported by equivalent change in CSS\r\n \r\n}\r\n","\r\nexport class GridStackItem {\r\n    x: number = 0;\r\n    y: number = 0;\r\n    height: number = 1;\r\n    width: number = 1;\r\n    maxHeight?: number | undefined;\r\n    minHeight?: number | undefined;\r\n    maxWidth?: number | undefined;\r\n    minWidth?: number | undefined;\r\n    noResize: boolean = false;\r\n    noMove?: boolean | undefined;\r\n    autoPosition?: boolean = false;\r\n    visible?: boolean = true;\r\n    locked?: boolean | undefined;\r\n    el?: any;\r\n    itemId?: string;\r\n    static Clone(widget: GridStackItem) {\r\n        var result = new GridStackItem();\r\n\r\n        result.autoPosition = widget.autoPosition;\r\n        result.itemId = widget.itemId;\r\n        result.el = widget.el;\r\n        result.height = widget.height;\r\n        result.locked = widget.locked;\r\n        result.maxHeight = widget.maxHeight;\r\n        result.maxWidth = widget.maxWidth;\r\n        result.minHeight = widget.minHeight;\r\n        result.minWidth = widget.minWidth;\r\n        result.noMove = widget.noMove;\r\n        result.noResize = widget.noResize;\r\n        result.width = widget.width;\r\n        result.x = widget.x;\r\n        result.y = widget.y;\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { Component, HostBinding, Input, Output, OnInit, ComponentRef, ElementRef, ViewChild, Renderer2, EventEmitter, OnDestroy, AfterViewInit, ViewContainerRef } from '@angular/core';\r\nimport { GridStackItem } from './grid-stack-item.model'\r\ndeclare var jQuery: any;\r\ndeclare var _: any;\r\n\r\n@Component({\r\n    selector: 'grid-stack-item',\r\n    template: `<div class=\"grid-stack-item-content\">\r\n              <div #contentPlaceholder *ngIf=\"contentTemplate\"></div>\r\n              <ng-content *ngIf=\"!contentTemplate\"></ng-content>\r\n            </div>`\r\n})\r\nexport class GridStackItemComponent implements OnInit, OnDestroy, AfterViewInit {\r\n    @ViewChild(\"contentPlaceholder\", { read: ViewContainerRef }) contentPlaceholder: ViewContainerRef;\r\n    @Input() contentTemplate: string;\r\n    @Input() option: GridStackItem;\r\n    @Output() onGridConfigurationChanged = new EventEmitter<GridStackItem>();\r\n\r\n    contentComponentRef: ComponentRef<any> = null;\r\n    jGridRef: any = null;\r\n    public jWidgetRef: any = null;\r\n\r\n    constructor(private el: ElementRef, private renderer: Renderer2) {\r\n        this.jWidgetRef = el.nativeElement;\r\n    }\r\n    get nativeElement(): HTMLElement {\r\n        return this.el.nativeElement;\r\n    }\r\n    ngOnInit() {\r\n        this.RenderWidget(null);\r\n    }\r\n\r\n    UpdateWidget(item: GridStackItem) {\r\n\r\n    }\r\n    RenderWidget(item: GridStackItem) {\r\n        let renderer = this.renderer;\r\n        if (item != null)\r\n            this.option = item;\r\n\r\n        String(this.option.x) == null ? this.renderer.removeAttribute(this.nativeElement, \"data-gs-x\") : this.renderer.setAttribute(this.nativeElement, \"data-gs-x\", String(this.option.x));\r\n        String(this.option.y) == null ? this.renderer.removeAttribute(this.nativeElement, \"data-gs-y\") : this.renderer.setAttribute(this.nativeElement, \"data-gs-y\", String(this.option.y));\r\n        String(this.option.width) == null ? this.renderer.removeAttribute(this.nativeElement, \"data-gs-width\") : this.renderer.setAttribute(this.nativeElement, \"data-gs-width\", String(this.option.width));\r\n        String(this.option.height) == null ? this.renderer.removeAttribute(this.nativeElement, \"data-gs-height\") : this.renderer.setAttribute(this.nativeElement, \"data-gs-height\", String(this.option.height));\r\n        //this.renderer.setElementAttribute(this.nativeElement, \"data-gs-x\", String(this.option.x));\r\n        //this.renderer.setElementAttribute(this.nativeElement, \"data-gs-y\", String(this.option.y));\r\n        //this.renderer.setElementAttribute(this.nativeElement, \"data-gs-width\", String(this.option.width));\r\n        //this.renderer.setElementAttribute(this.nativeElement, \"data-gs-height\", String(this.option.height));\r\n\r\n        if (this.option.minWidth) {\r\n            String(this.option.minWidth) == null ? this.renderer.removeAttribute(this.nativeElement, \"data-gs-min-width\") : this.renderer.setAttribute(this.nativeElement, \"data-gs-min-width\", String(this.option.minWidth));\r\n            //renderer.setElementAttribute(this.nativeElement, \"data-gs-min-width\", String(this.option.minWidth));\r\n        }\r\n        if (this.option.noResize != null && this.option.noResize == true) {\r\n            \"yes\" == null ? this.renderer.removeAttribute(this.nativeElement, \"data-gs-no-resize\") : this.renderer.setAttribute(this.nativeElement, \"data-gs-no-resize\", \"yes\");\r\n            //renderer.setElementAttribute(this.nativeElement, \"data-gs-no-resize\", \"yes\");\r\n        }\r\n\r\n        if (this.option.visible === false) {\r\n            this.renderer.addClass(this.nativeElement, \"hidden\");\r\n            //this.renderer.setElementClass(this.nativeElement, \"hidden\", true);\r\n        }\r\n\r\n        if (this.option.itemId)\r\n        {\r\n            this.option.itemId == null ? this.renderer.removeAttribute(this.nativeElement, \"data-item-id\") : this.renderer.setAttribute(this.nativeElement, \"data-item-id\", this.option.itemId);\r\n            //this.renderer.setElementAttribute(this.nativeElement, \"data-item-id\", this.option.itemId);\r\n        }\r\n    }\r\n\r\n    update(x: number, y: number, width: number, height: number): void {\r\n        // console.log(\"here\");\r\n        if (x === this.option.x && y === this.option.y && width === this.option.width && height === this.option.height)\r\n            return;\r\n        if (this.option != null) {\r\n            this.option.x = x;\r\n            this.option.y = y;\r\n            this.option.width = width;\r\n            this.option.height = height;\r\n\r\n            var optionNew = GridStackItem.Clone(this.option);\r\n            this.onGridConfigurationChanged.emit(optionNew);\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        //if (!!this.contentTemplate) {\r\n        //    this.componentService.getDynamicComponentFactory({\r\n        //        selector: `grid-stack-item-${Date.now()}`,\r\n        //        template: this.contentTemplate\r\n        //    })\r\n        //        .then(factory => {\r\n        //            this.contentComponentRef = this.contentPlaceholder.createComponent(factory);\r\n        //        })\r\n        //}\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.contentComponentRef !== null)\r\n            this.contentComponentRef.destroy();\r\n    }\r\n}\r\n","import { Component, HostBinding, QueryList, Input, ContentChildren, ElementRef, Renderer2, AfterContentInit } from '@angular/core';\r\nimport { GridStackOptions } from './grid-stack-options.model'\r\nimport { GridStackItem } from './grid-stack-item.model'\r\nimport { GridStackItemComponent } from './grid-stack-item.component'\r\nimport * as jqueryProxy from 'jquery';\r\nimport * as _ from 'lodash';\r\nimport 'gridstack';\r\n\r\nconst jquery: JQueryStatic = (<any>jqueryProxy).default || jqueryProxy\r\n\r\n@Component({\r\n    selector: 'grid-stack',\r\n    template: `<ng-content></ng-content>`,\r\n    styles: [\":host { display: block; }\"]\r\n})\r\nexport class GridStackComponent implements AfterContentInit {\r\n    @Input() options: GridStackOptions = new GridStackOptions();\r\n    @ContentChildren(GridStackItemComponent) items: QueryList<GridStackItemComponent>;\r\n    private gridStack: JQuery = null;\r\n    private grid: GridStack = null;\r\n    constructor(private el: ElementRef, private renderer: Renderer2) {\r\n\r\n    }\r\n\r\n    makeWidget(item: GridStackItemComponent) {\r\n        //let widget = this.grid.makeWidget(item.nativeElement);\r\n        item.jGridRef = this.grid;\r\n        //item.jWidgetRef = widget;\r\n        if (item.option != null && item.option.noResize != null && item.option.noResize == true)\r\n            return;\r\n        this.grid.resizable(item.nativeElement, true);\r\n        this.grid.move(item.nativeElement, item.option.x, item.option.y);\r\n        this.grid.resize(item.nativeElement, item.option.width, item.option.height);\r\n    };\r\n\r\n    updateWidget(item: GridStackItemComponent) {\r\n        this.grid.resizable(item.nativeElement, true);\r\n        this.grid.move(item.nativeElement, item.option.x, item.option.y);\r\n        this.grid.resize(item.nativeElement, item.option.width, item.option.height);\r\n    }\r\n\r\n    enableMove(doEnable: boolean, includeNewWidgets: boolean) {\r\n        this.grid.enableMove(doEnable, includeNewWidgets);\r\n    }\r\n\r\n    public AddWidget(item: GridStackItemComponent) {\r\n        let widget = this.grid.makeWidget(item.nativeElement);\r\n        item.jGridRef = this.grid;\r\n        //item.jWidgetRef = widget;\r\n        if (item.option != null && item.option.noResize != null && item.option.noResize == true)\r\n            return;\r\n        this.grid.resizable(item.nativeElement, true);\r\n        this.grid.move(item.nativeElement, item.option.x, item.option.y);\r\n        this.grid.resize(item.nativeElement, item.option.width, item.option.height);\r\n    }\r\n\r\n    public RemoveWidget(item: GridStackItemComponent) {\r\n        let widget = this.grid.removeWidget(item.nativeElement, false);\r\n    }\r\n    ngAfterContentInit(): void {\r\n        var that = this;\r\n        let nativeElement = this.el.nativeElement;\r\n        if (this.options == null)\r\n            this.options = new GridStackOptions();\r\n        if (this.options.cellHeight == null)\r\n            this.options.cellHeight = 60;\r\n        if (this.options.width == null)\r\n            this.options.width = 12;\r\n        if (this.options.height == null)\r\n            this.options.height = 0;\r\n        if (this.options.animate == null)\r\n            this.options.animate = true;\r\n        if (this.options.float == null)\r\n            this.options.float = false;\r\n        if (this.options.resizable == null)\r\n            this.options.resizable = true;\r\n        String(this.options.width) == null ? this.renderer.removeAttribute(nativeElement, \"data-gs-width\") : this.renderer.setAttribute(nativeElement, \"data-gs-width\", String(this.options.width));\r\n        String(this.options.height) == null ? this.renderer.removeAttribute(nativeElement, \"data-gs-height\") : this.renderer.setAttribute(nativeElement, \"data-gs-height\", String(this.options.height));\r\n        //this.renderer.setElementAttribute(nativeElement, \"data-gs-width\", String(this.options.width));\r\n        //this.renderer.setElementAttribute(nativeElement, \"data-gs-height\", String(this.options.height));\r\n\r\n        this.gridStack = jquery(nativeElement).gridstack(this.options);\r\n        this.grid = this.gridStack.data(\"gridstack\");\r\n\r\n        this.gridStack.on(\"change\", (e: any, items: any) => {\r\n            _.each(items, (item: any) => this.widgetChanged(item));\r\n        });\r\n\r\n\r\n\r\n\r\n        // Initialize widgets\r\n        this.items.forEach(item => that.makeWidget(item));\r\n\r\n    }\r\n\r\n    private widgetChanged(change: GridStackItem): void {\r\n        console.log(change);\r\n        //  debugger;\r\n        //console.log(change);\r\n        var jWidget = change.el;\r\n        var gridStackItem = this.items.find(item => item.jWidgetRef !== null ? item.jWidgetRef === jWidget[0] : false);\r\n        if (!gridStackItem)\r\n            return;\r\n\r\n\r\n        gridStackItem.update(change.x, change.y, change.width, change.height);\r\n\r\n    }\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[gridStackDirective]'\r\n})\r\nexport class GridStackDirective {\r\n\r\n  constructor(private el: ElementRef) {\r\n  }\r\n\r\n}\r\n","import { Injectable, PipeTransform, Pipe } from '@angular/core';\r\n\r\n/**\r\n * Transforms any input value\r\n */\r\n@Pipe({\r\n  name: 'gridStackPipe'\r\n})\r\n@Injectable()\r\nexport class GridStackPipe implements PipeTransform {\r\n  transform(value: any, args: any[] = null): string {\r\n    return value;\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GridStackComponent } from './lib/grid-stack.component';\r\nimport { GridStackItemComponent } from './lib/grid-stack-item.component';\r\nimport { GridStackDirective } from './lib/grid-stack.directive';\r\nimport { GridStackPipe } from './lib/grid-stack.pipe';\r\n\r\nimport { GridStackOptions } from './lib/grid-stack-options.model';\r\nimport { GridStackItem } from './lib/grid-stack-item.model';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    GridStackComponent,\r\n    GridStackItemComponent,\r\n    GridStackDirective,\r\n    GridStackPipe\r\n  ],\r\n  exports: [\r\n    GridStackComponent,\r\n    GridStackItemComponent,\r\n    GridStackDirective,\r\n    GridStackPipe\r\n  ]\r\n})\r\nexport class GridStackModule {\r\n}\r\n"]}